{"ast":null,"code":"import { handleActions } from \"redux-actions\";\nimport update from \"immutability-helper\";\nimport * as constants from \"../constants\";\nconst initialState = {\n  categoryData: {\n    isLoading: false,\n    isError: false,\n    isSuccess: false,\n    data: {}\n  }\n};\nz; //functions to get category data\n\nconst categoryDataRequest = (state, action) => {\n  return update(state, {\n    categoryData: {\n      isLoading: {\n        $set: true\n      },\n      isError: {\n        $set: false\n      },\n      isSuccess: {\n        $set: false\n      },\n      data: {\n        $set: {}\n      }\n    }\n  });\n};\n\nconst categorydDataSuccess = (state, action) => {\n  return update(state, {\n    categoryData: {\n      isLoading: {\n        $set: false\n      },\n      isError: {\n        $set: false\n      },\n      isSuccess: {\n        $set: true\n      },\n      data: {\n        $set: action.payload\n      }\n    }\n  });\n};\n\nconst categoryDataError = (state, action) => {\n  return update(state, {\n    categoryData: {\n      isLoading: {\n        $set: false\n      },\n      isError: {\n        $set: true\n      },\n      isSuccess: {\n        $set: false\n      },\n      data: {\n        $set: action.payload\n      }\n    }\n  });\n}; //end\n\n\nexport default handleActions({\n  [constants.GET_CATEGORY_REQUEST]: categoryDataRequest,\n  [constants.GET_CATEGORY_SUCCESS]: categorydDataSuccess,\n  [constants.GET_CATEGORY_ERROR]: categoryDataError\n}, initialState);","map":{"version":3,"sources":["/Users/mohammaddanish/Desktop/projects/ssrapp/src/redux/category/reducer.js"],"names":["handleActions","update","constants","initialState","categoryData","isLoading","isError","isSuccess","data","z","categoryDataRequest","state","action","$set","categorydDataSuccess","payload","categoryDataError","GET_CATEGORY_REQUEST","GET_CATEGORY_SUCCESS","GET_CATEGORY_ERROR"],"mappings":"AAAA,SAASA,aAAT,QAA8B,eAA9B;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAO,KAAKC,SAAZ,MAA2B,cAA3B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,YAAY,EAAE;AACZC,IAAAA,SAAS,EAAE,KADC;AAEZC,IAAAA,OAAO,EAAE,KAFG;AAGZC,IAAAA,SAAS,EAAE,KAHC;AAIZC,IAAAA,IAAI,EAAE;AAJM;AADK,CAArB;AAQAC,CAAC,C,CACD;;AACA,MAAMC,mBAAmB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC7C,SAAOX,MAAM,CAACU,KAAD,EAAQ;AACnBP,IAAAA,YAAY,EAAE;AACZC,MAAAA,SAAS,EAAE;AAAEQ,QAAAA,IAAI,EAAE;AAAR,OADC;AAEZP,MAAAA,OAAO,EAAE;AAAEO,QAAAA,IAAI,EAAE;AAAR,OAFG;AAGZN,MAAAA,SAAS,EAAE;AAAEM,QAAAA,IAAI,EAAE;AAAR,OAHC;AAIZL,MAAAA,IAAI,EAAE;AAAEK,QAAAA,IAAI,EAAE;AAAR;AAJM;AADK,GAAR,CAAb;AAQD,CATD;;AAWA,MAAMC,oBAAoB,GAAG,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAC9C,SAAOX,MAAM,CAACU,KAAD,EAAQ;AACnBP,IAAAA,YAAY,EAAE;AACZC,MAAAA,SAAS,EAAE;AAAEQ,QAAAA,IAAI,EAAE;AAAR,OADC;AAEZP,MAAAA,OAAO,EAAE;AAAEO,QAAAA,IAAI,EAAE;AAAR,OAFG;AAGZN,MAAAA,SAAS,EAAE;AAAEM,QAAAA,IAAI,EAAE;AAAR,OAHC;AAIZL,MAAAA,IAAI,EAAE;AAAEK,QAAAA,IAAI,EAAED,MAAM,CAACG;AAAf;AAJM;AADK,GAAR,CAAb;AAQD,CATD;;AAWA,MAAMC,iBAAiB,GAAG,CAACL,KAAD,EAAQC,MAAR,KAAmB;AAC3C,SAAOX,MAAM,CAACU,KAAD,EAAQ;AACnBP,IAAAA,YAAY,EAAE;AACZC,MAAAA,SAAS,EAAE;AAAEQ,QAAAA,IAAI,EAAE;AAAR,OADC;AAEZP,MAAAA,OAAO,EAAE;AAAEO,QAAAA,IAAI,EAAE;AAAR,OAFG;AAGZN,MAAAA,SAAS,EAAE;AAAEM,QAAAA,IAAI,EAAE;AAAR,OAHC;AAIZL,MAAAA,IAAI,EAAE;AAAEK,QAAAA,IAAI,EAAED,MAAM,CAACG;AAAf;AAJM;AADK,GAAR,CAAb;AAQD,CATD,C,CAUA;;;AAEA,eAAef,aAAa,CAC1B;AACE,GAACE,SAAS,CAACe,oBAAX,GAAkCP,mBADpC;AAEE,GAACR,SAAS,CAACgB,oBAAX,GAAkCJ,oBAFpC;AAGE,GAACZ,SAAS,CAACiB,kBAAX,GAAgCH;AAHlC,CAD0B,EAM1Bb,YAN0B,CAA5B","sourcesContent":["import { handleActions } from \"redux-actions\";\nimport update from \"immutability-helper\";\nimport * as constants from \"../constants\";\n\nconst initialState = {\n  categoryData: {\n    isLoading: false,\n    isError: false,\n    isSuccess: false,\n    data: {},\n  },\n};\nz\n//functions to get category data\nconst categoryDataRequest = (state, action) => {\n  return update(state, {\n    categoryData: {\n      isLoading: { $set: true },\n      isError: { $set: false },\n      isSuccess: { $set: false },\n      data: { $set: {} },\n    },\n  });\n};\n\nconst categorydDataSuccess = (state, action) => {\n  return update(state, {\n    categoryData: {\n      isLoading: { $set: false },\n      isError: { $set: false },\n      isSuccess: { $set: true },\n      data: { $set: action.payload },\n    },\n  });\n};\n\nconst categoryDataError = (state, action) => {\n  return update(state, {\n    categoryData: {\n      isLoading: { $set: false },\n      isError: { $set: true },\n      isSuccess: { $set: false },\n      data: { $set: action.payload },\n    },\n  });\n};\n//end\n\nexport default handleActions(\n  {\n    [constants.GET_CATEGORY_REQUEST]: categoryDataRequest,\n    [constants.GET_CATEGORY_SUCCESS]: categorydDataSuccess,\n    [constants.GET_CATEGORY_ERROR]: categoryDataError,\n  },\n  initialState\n);\n"]},"metadata":{},"sourceType":"module"}